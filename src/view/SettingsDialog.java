/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <http://unlicense.org/>
 */

package view;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.KeyStroke;
import javax.swing.SpinnerNumberModel;
import javax.swing.WindowConstants;

/**
 * SettingsDialog class
 */
public class SettingsDialog extends JDialog {
    private static ImageIcon lockedIcon;
    private static ImageIcon unlockedIcon;

    public static final int ACCEPTED = 0;
    public static final int CANCELLED = 1;
    public static final int BAD = 2;
    private static final long serialVersionUID = 1L;

    private int option;
    private int authStatus;
    private String key;


    /**
     * Creates new form Settings
     *
     * @param parent Parent frame
     */
    public SettingsDialog(java.awt.Frame parent) {
        super(parent, true);
        initComponents();

        /* Icons */
        lockedIcon = new ImageIcon(getClass().getResource("/resources/locked.png"));
        unlockedIcon = new ImageIcon(getClass().getResource("/resources/unlocked.png"));

        /* Close the actions */
        setCloseAction(acceptSettingsButton, KeyEvent.VK_ENTER);
        setCloseAction(cancelSettingsButton, KeyEvent.VK_ESCAPE);

        /* Default option */
        option = CANCELLED;
        authStatus = CANCELLED;
        key = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        JPanel connectionPanel = new JPanel();
        hostLabel = new JLabel();
        hostValue = new JTextField();
        JLabel portLabel = new JLabel();
        portValue = new JSpinner();
        JLabel instanceLabel = new JLabel();
        instanceValue = new JTextField();
        JLabel dbLabel = new JLabel();
        dbValue = new JTextField();
        JPanel securityPanel = new JPanel();
        JLabel idLabel = new JLabel();
        idValue = new JTextField();
        passLabel = new JLabel();
        passValue = new JPasswordField();
        JPanel optionsPanel = new JPanel();
        editSettingsButton = new JToggleButton();
        Box.Filler filler = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 0));
        acceptSettingsButton = new JButton();
        cancelSettingsButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuración");
        setName("settingsDialog"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new GridBagLayout());

        connectionPanel.setBorder(BorderFactory.createTitledBorder("Conexión"));
        connectionPanel.setName("connectionPanel"); // NOI18N
        connectionPanel.setLayout(new GridBagLayout());

        hostLabel.setText("Host:");
        hostLabel.setName("hostLabel"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new Insets(0, 5, 0, 0);
        connectionPanel.add(hostLabel, gridBagConstraints);

        hostValue.setName("hostValue"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(2, 5, 2, 5);
        connectionPanel.add(hostValue, gridBagConstraints);

        portLabel.setText("Puerto:");
        portLabel.setName("portLabel"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new Insets(0, 5, 0, 0);
        connectionPanel.add(portLabel, gridBagConstraints);

        portValue.setModel(new SpinnerNumberModel(0, 0, 65535, 1));
        portValue.setEditor(new JSpinner.NumberEditor(portValue, "#"));
        portValue.setName("portValue"); // NOI18N
        portValue.setPreferredSize(new Dimension(100, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(0, 5, 0, 5);
        connectionPanel.add(portValue, gridBagConstraints);

        instanceLabel.setText("Instancia:");
        instanceLabel.setName("instanceLabel"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new Insets(0, 5, 0, 0);
        connectionPanel.add(instanceLabel, gridBagConstraints);

        instanceValue.setName("instanceValue"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(2, 5, 2, 5);
        connectionPanel.add(instanceValue, gridBagConstraints);

        dbLabel.setText("Base de Datos:");
        dbLabel.setName("dbLabel"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new Insets(0, 5, 0, 0);
        connectionPanel.add(dbLabel, gridBagConstraints);

        dbValue.setName("dbValue"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(2, 5, 5, 5);
        connectionPanel.add(dbValue, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 2, 5);
        getContentPane().add(connectionPanel, gridBagConstraints);

        securityPanel.setBorder(BorderFactory.createTitledBorder("Seguridad"));
        securityPanel.setName("securityPanel"); // NOI18N
        securityPanel.setLayout(new GridBagLayout());

        idLabel.setText("Usuario:");
        idLabel.setName("idLabel"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new Insets(0, 5, 0, 0);
        securityPanel.add(idLabel, gridBagConstraints);

        idValue.setName("idValue"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new Insets(0, 5, 2, 5);
        securityPanel.add(idValue, gridBagConstraints);

        passLabel.setText("Contraseña:");
        passLabel.setName("passLabel"); // NOI18N
        passLabel.setPreferredSize(dbLabel.getPreferredSize());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new Insets(0, 5, 0, 0);
        securityPanel.add(passLabel, gridBagConstraints);

        passValue.setName("passValue"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(2, 5, 5, 5);
        securityPanel.add(passValue, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(2, 5, 2, 5);
        getContentPane().add(securityPanel, gridBagConstraints);

        optionsPanel.setName("optionsPanel"); // NOI18N
        optionsPanel.setLayout(new GridBagLayout());

        editSettingsButton.setName("editSettingsButton"); // NOI18N
        editSettingsButton.setPreferredSize(new Dimension(23, 23));
        editSettingsButton.setActionCommand(editSettingsButton.getName());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        optionsPanel.add(editSettingsButton, gridBagConstraints);

        filler.setName("filler"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        optionsPanel.add(filler, gridBagConstraints);

        acceptSettingsButton.setText("Aceptar");
        acceptSettingsButton.setName("acceptSettingsButton"); // NOI18N
        acceptSettingsButton.setActionCommand(acceptSettingsButton.getName());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new Insets(5, 0, 5, 5);
        optionsPanel.add(acceptSettingsButton, gridBagConstraints);
        getRootPane().setDefaultButton(acceptSettingsButton);

        cancelSettingsButton.setText("Cancelar");
        cancelSettingsButton.setName("cancelSettingsButton"); // NOI18N
        cancelSettingsButton.setActionCommand(cancelSettingsButton.getName());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new Insets(5, 5, 5, 0);
        optionsPanel.add(cancelSettingsButton, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(2, 5, 5, 5);
        getContentPane().add(optionsPanel, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Asign close action to key
     *
     * @param button Button to activate
     * @param key Key to active the button
     */
    private void setCloseAction(JButton button, int key) {
        String command = button.getName();
        InputMap inputMap = super.getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(key, 0), command);
        super.getRootPane().getActionMap().put(command, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                button.doClick();
            }
        });
    }

    /**
     * Authenticate password
     *
     * @param str Checksum to authenticate
     */
    public void authenticate(String str) {
        if (str == null) {
            authStatus = CANCELLED;
            return;
        }

        authStatus = key.equals(str) ? ACCEPTED : BAD;
    }

    /**
     * Set focus to pass field
     */
    public void focusPass() {
        passValue.requestFocusInWindow();
    }

    /**
     * Validate if any field is empty
     *
     * @return true if any field is empty
     */
    public boolean hasEmptyFields() {
        boolean empty = hasEmptyConnectionFields();
        empty |= passValue.getPassword().length == 0;

       return empty;
    }

    /**
     * Validate if any connection field is empty
     *
     * @return true if any field connection is empty
     */
    public boolean hasEmptyConnectionFields() {
        boolean empty = hostValue.getText().isEmpty();
        empty |= instanceValue.getText().isEmpty();
        empty |= dbValue.getText().isEmpty();
        empty |= idValue.getText().isEmpty();

       return empty;
    }

    /**
     * Close the dialog and asign the option
     *
     * @param status ACCEPTED or CANCELLED
     */
    public void close(int status) {
        option = status;

        if (status != BAD) {
            setVisible(false);
            dispose();
        }
    }



    /* Getters */

    /**
     * Return true if the connections fields are locked
     *
     * @return true if the connections fields are locked
     */
    public boolean isEditable() {
        return editSettingsButton.isSelected();
    }

    /**
     * Status of the last time the dialogue was closed
     *
     * @return Status ACCEPTED or CANCELLED
     */
    public int getOption() {
        return option;
    }

    /**
     * Get host address
     *
     * @return Host address
     */
    public String getHost() {
        return hostValue.getText();
    }

    /**
     * Get port number
     *
     * @return Port number
     */
    public int getPort() {
        return (int) portValue.getValue();
    }

    /**
     * Get instance
     *
     * @return Instance
     */
    public String getInstance() {
        return instanceValue.getText();
    }

    /**
     * Get data base name
     *
     * @return Data base name
     */
    public String getDB() {
        return dbValue.getText();
    }

    /**
     * Get user ID
     *
     * @return User ID
     */
    public String getID() {
        return idValue.getText();
    }

    /**
     * Get user password
     *
     * @return User password
     */
    public String getPass() {
        char[] array = passValue.getPassword();
        String pass = new String(array);
        Arrays.fill(array, '\0');

        return pass;
    }

    /**
     * Get the authentication status
     *
     * @return Authentication status
     */
    public int getAuthStatus() {
        return authStatus;
    }

    /* Setters */

    /**
     * Lock or unlock settings fields
     *
     * @param status true to set editable settings fields
     */
    public void setEditable(boolean status) {
        if (editSettingsButton.isSelected() != status)
            editSettingsButton.setSelected(status);

        authStatus = CANCELLED;
        editSettingsButton.setIcon(status ? unlockedIcon : lockedIcon);

        hostValue.setEnabled(status);
        portValue.setEnabled(status);
        instanceValue.setEnabled(status);
        dbValue.setEnabled(status);
        idValue.setEnabled(status);
    }

    /**
     * Set host address
     *
     * @param host Host address
     */
    public void setHost(String host) {
        hostValue.setText(host);
    }

    /**
     * Set port number
     *
     * @param port Port number
     */
    public void setPort(int port) {
        portValue.setValue(port);
    }

    /**
     * Set instance name
     *
     * @param instance Instance name
     */
    public void setInstance(String instance) {
        instanceValue.setText(instance);
    }

    /**
     * Set data base name
     *
     * @param database Data base name
     */
    public void setDB(String database) {
        dbValue.setText(database);
    }

    /**
     * Set user ID
     *
     * @param user User ID
     */
    public void setID(String user) {
        idValue.setText(user);
    }

    /**
     * Set user password
     *
     * @param pass User password
     */
    public void setPass(String pass) {
        passValue.setText(pass);
    }

    /**
     * Set checksum hash
     *
     * @param str Checksum
     */
    public void setKey(String str) {
        key = str;
    }

    /**
     * Set controller object
     *
     * @param controller Controller object
     */
    public void setController(ActionListener controller) {
        /* Buttons */
        editSettingsButton.addActionListener(controller);
        acceptSettingsButton.addActionListener(controller);
        cancelSettingsButton.addActionListener(controller);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton acceptSettingsButton;
    private JButton cancelSettingsButton;
    private JTextField dbValue;
    private JToggleButton editSettingsButton;
    private JLabel hostLabel;
    private JTextField hostValue;
    private JTextField idValue;
    private JTextField instanceValue;
    private JLabel passLabel;
    private JPasswordField passValue;
    private JSpinner portValue;
    // End of variables declaration//GEN-END:variables
}
